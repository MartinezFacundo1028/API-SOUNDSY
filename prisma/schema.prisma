generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  BUYER
  MUSICIAN
  ADMIN
}

enum OrderStatus {
  PENDING_PAYMENT
  PAID
  IN_PROGRESS
  DELIVERED
  COMPLETED
  CANCELED
  DISPUTED
}

model User {
  id           String   @id @default(cuid())
  email        String   @unique
  passwordHash String
  role         Role     @default(BUYER)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  profile      Profile?
  services     Service[] @relation("ServiceOwner")
  ordersBuyer  Order[]   @relation("OrdersAsBuyer")
  ordersSeller Order[]   @relation("OrdersAsSeller")
  reviews      Review[]
}

model Profile {
  id          String   @id @default(cuid())
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id])
  displayName String
  bio         String?
  avatarUrl   String?
  instruments String[]
  links       Json?
  genres      Genre[]  @relation("ProfileGenres")
}

model Genre {
  id       String    @id @default(cuid())
  name     String    @unique
  services Service[] @relation("ServiceGenres")
  profiles Profile[] @relation("ProfileGenres")
}

model Service {
  id           String   @id @default(cuid())
  ownerId      String
  owner        User     @relation("ServiceOwner", fields: [ownerId], references: [id])
  title        String
  description  String
  basePrice    Int
  currency     String   @default("USD")
  deliveryDays Int
  tags         String[]
  ratingAvg    Float    @default(0)
  ratingCount  Int      @default(0)
  genres       Genre[]  @relation("ServiceGenres")
  samples      Sample[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Order     Order[]
}

model Sample {
  id        String  @id @default(cuid())
  serviceId String
  service   Service @relation(fields: [serviceId], references: [id])
  url       String
  kind      String
}

model Order {
  id         String      @id @default(cuid())
  serviceId  String
  service    Service     @relation(fields: [serviceId], references: [id])
  buyerId    String
  buyer      User        @relation("OrdersAsBuyer", fields: [buyerId], references: [id])
  sellerId   String
  seller     User        @relation("OrdersAsSeller", fields: [sellerId], references: [id])
  status     OrderStatus @default(PENDING_PAYMENT)
  amount     Int
  currency   String
  paymentRef String?
  chatId     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Chat      Chat?
  Review    Review?
}

model Chat {
  id        String    @id @default(cuid())
  orderId   String    @unique
  order     Order     @relation(fields: [orderId], references: [id])
  buyerId   String
  sellerId  String
  createdAt DateTime  @default(now())
  Message   Message[]
}

model Message {
  id          String    @id @default(cuid())
  chatId      String
  chat        Chat      @relation(fields: [chatId], references: [id])
  senderId    String
  body        String
  attachments Json?
  readAt      DateTime?
  createdAt   DateTime  @default(now())

  @@index([chatId, createdAt])
}

model Review {
  id        String   @id @default(cuid())
  orderId   String   @unique
  order     Order    @relation(fields: [orderId], references: [id])
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?
}
